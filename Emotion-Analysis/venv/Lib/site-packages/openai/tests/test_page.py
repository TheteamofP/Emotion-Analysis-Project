import unittest
from unittest.mock import patch, MagicMock
from flask import Flask
from your_blueprint_module import pb  # 替换为实际蓝图定义所在的模块

class TestPageBlueprint(unittest.TestCase):
    def setUp(self):
        """设置 Flask 测试环境"""
        self.app = Flask(__name__)
        self.app.register_blueprint(pb)
        self.client = self.app.test_client()
        self.app.config['TESTING'] = True

    @patch('your_blueprint_module.emotion_analyzer')  # 替换为实际模块路径
    def test_spider_analysis_topic_success(self, mock_emotion_analyzer):
        """测试 /spider_analysis/topic 成功路径"""
        mock_emotion_analyzer.return_value = 1  # 模拟返回成功结果

        response = self.client.post('/page/spider_analysis/topic', data={
            'cookie': 'test_cookie',
            'keyword': 'test_keyword',
            'start_date': '2023-01-01',
            'end_date': '2023-01-31',
            'regions': 'test_region',
            'weibo_type_input': 'test_type',
            'contain_type_input': 'test_contain'
        })

        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        self.assertEqual(data['status'], 'success')
        self.assertIn('result', data)

    @patch('your_blueprint_module.emotion_analyzer')  # 替换为实际模块路径
    def test_spider_analysis_topic_failure(self, mock_emotion_analyzer):
        """测试 /spider_analysis/topic 失败路径"""
        mock_emotion_analyzer.return_value = 0  # 模拟返回失败结果

        response = self.client.post('/page/spider_analysis/topic', data={
            'cookie': 'test_cookie',
            'keyword': 'test_keyword',
            'start_date': '2023-01-01',
            'end_date': '2023-01-31',
            'regions': 'test_region',
            'weibo_type_input': 'test_type',
            'contain_type_input': 'test_contain'
        })

        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        self.assertEqual(data['status'], 'failed')
        self.assertIn('message', data)